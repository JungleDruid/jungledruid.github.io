{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","rtsrpg","_this2","this","react_default","a","createElement","className","style","width","height","title","src","ariaLabel","onClick","setState","_this3","maxWidth","margin","alt","renderRtsrpg","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAgHeA,0NA3GbC,MAAQ,CACNC,QAAQ,iFAGK,IAAAC,EAAAC,KACb,OAAKA,KAAKH,MAAMC,OAEdG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACfH,EAAAC,EAAAC,cAAA,OACEC,UAAU,gBACVC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SAEhCN,EAAAC,EAAAC,cAAA,UACEK,MAAM,OACNC,IAAI,eACJJ,MAAO,CACLC,MAAO,IACPC,OAAQ,QAIdN,EAAAC,EAAAC,cAAA,UACEC,UAAU,uBACVM,UAAU,QACVC,QAAS,kBAAMZ,EAAKa,SAAS,CAAEd,QAAQ,QApBd,sCA0BxB,IAAAe,EAAAb,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,WAASC,UAAU,iCACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,UACEC,UAAU,QACVC,MAAO,CAAES,SAAU,IAAKC,OAAQ,cAEhCd,EAAAC,EAAAC,cAAA,OACEa,IAAI,YACJP,IAAI,iBACJL,UAAU,gBAGdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAd,WACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,gBAINH,EAAAC,EAAAC,cAAA,WAASC,UAAU,mBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,2BAAd,mCAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAChBH,EAAAC,EAAAC,cAAA,OAAKM,IAAI,iBAAiBO,IAAI,kBAGlCf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAb,0BACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0BAAb,WACAH,EAAAC,EAAAC,cAAA,0EAIAF,EAAAC,EAAAC,cAAA,UACEC,UAAU,oBACVO,QAAS,kBAAME,EAAKD,SAAS,CAAEd,QAAQ,MAFzC,mBAURG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAChBH,EAAAC,EAAAC,cAAA,OACEM,IAAI,oDACJO,IAAI,kBAIVf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAO1BJ,KAAKiB,uBAtGIC,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.59506de5.chunk.js","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\nimport \"./mystyles.scss\";\n\nclass App extends React.Component {\n  state = {\n    rtsrpg: false\n  };\n\n  renderRtsrpg() {\n    if (!this.state.rtsrpg) return null;\n    return (\n      <div className=\"modal is-active\">\n        <div className=\"modal-background\" />\n        <div\n          className=\"modal-content\"\n          style={{ width: \"auto\", height: \"auto\" }}\n        >\n          <iframe\n            title=\"game\"\n            src=\"games/rtsrpg\"\n            style={{\n              width: 800,\n              height: 500\n            }}\n          />\n        </div>\n        <button\n          className=\"modal-close is-large\"\n          ariaLabel=\"close\"\n          onClick={() => this.setState({ rtsrpg: false })}\n        />\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <section className=\"hero is-primary is-fullheight\">\n          <div className=\"hero-body\">\n            <div className=\"container has-text-centered\">\n              <figure\n                className=\"image\"\n                style={{ maxWidth: 512, margin: \"50px auto\" }}\n              >\n                <img\n                  alt=\"Yonsh Lin\"\n                  src=\"img/my_pic.jpg\"\n                  className=\"is-rounded\"\n                />\n              </figure>\n              <h2 className=\"subtitle is-size-4\">Hi, I&apos;m</h2>\n              <h1 className=\"title is-size-1\">Yonsh Lin</h1>\n            </div>\n          </div>\n        </section>\n        <section className=\"hero is-warning\">\n          <div className=\"hero-body\">\n            <div className=\"container\">\n              <h1 className=\"title has-text-centered\">\n                My Indie Game Projects Showcase\n              </h1>\n              <div className=\"columns\">\n                <div className=\"column\">\n                  <div className=\"card\">\n                    <div className=\"card-image\">\n                      <figure className=\"image\">\n                        <img src=\"img/rtsrpg.jpg\" alt=\"Placeholder\" />\n                      </figure>\n                    </div>\n                    <div className=\"card-content\">\n                      <div className=\"content\">\n                        <p className=\"title\">Defenders of the Realm</p>\n                        <p className=\"subtitle has-text-grey\">RTS/RPG</p>\n                        <p>\n                          A game I made when Spine (a 2D animation tool) just\n                          released.\n                        </p>\n                        <button\n                          className=\"button is-primary\"\n                          onClick={() => this.setState({ rtsrpg: true })}\n                        >\n                          Try it out!\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"column\">\n                  <div className=\"card\">\n                    <div className=\"card-image\">\n                      <figure className=\"image\">\n                        <img\n                          src=\"https://bulma.io/images/placeholders/1280x960.png\"\n                          alt=\"Placeholder\"\n                        />\n                      </figure>\n                    </div>\n                    <div className=\"card-content\"></div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n        {this.renderRtsrpg()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}